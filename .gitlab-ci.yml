# === Templates === #
# These are commonized definitions used across the stage definitions.
# Scroll down to the `CI Stages` section for the stage definitions.

.print_tool_versions_linux: &print_tool_versions_linux |
  # Print tool versions
  printf "Shell:\n"
  $0 --version
  printf "\n"

  printf "Cargo:\n"
  cargo --version -v
  printf "\n"

  printf "Rustc:\n"
  rustc --version -v
  printf "\n"

.install_update_cargo_subcommands: &install_update_cargo_subcommands >-
  cargo install-update -i cargo-update

# === CI Stages === #

# Unfortunately we are not able to split `build` and `test` phases -- when we do, the `test` Gitlab
# CI runner is slightly different to the `build` runner, so the artifacts compiled in the `build`
# phase aren't used, and Rust attempts to recompile them in the test phase.
stages:
  - build_and_test
  - publish

variables:
  # If we do not override `CARGO_HOME`, we must ensure that ALL projects that use the Gitlab runners
  # do not request different versions of tooling, otherwise we run into concurrency issues.
  # Also, we are not able to set it at the this level since we have a Windows runner which does not
  # use the `$VAR` syntax, but `%VAR%`.
  #
  # Furthermore, there is an open bug in Gitlab that Windows is unable to use CI environment
  # variables in .gitlab-ci.yml:
  #
  # See <https://gitlab.com/gitlab-org/gitlab-ce/issues/43337>
  # ---
  # CARGO_HOME: $CI_PROJECT_DIR/cargo
  RUST_BACKTRACE: '1'
  AMETHYST_LOG_LEVEL_FILTER: WARN

nightly:conformance:
  stage: build_and_test # piggy backing so that it runs in parallel
  tags:
    - kcov
    - linux
    - rust
    - nightly
  variables:
    RUSTUP_TOOLCHAIN: nightly-x86_64-unknown-linux-gnu
    # Uncomment the next line if clippy is not compatible with the latest nightly.
    CLIPPY_ENABLED: 'false'
  before_script:
    - *print_tool_versions_linux
    - scripts/install_packages_linux.sh
    - scripts/install_cargo_update.sh
    - *install_update_cargo_subcommands

    # Security audit and license checks
    - cargo install-update -i cargo-make cargo-audit cargo-license
  script:
    # Code quality, security vulnerability checks, license compatibility
    - cargo make --no-workspace conformance

.linux_job_common: &linux_job_common
  stage: build_and_test
  tags:
    - kcov
    - linux
    - rust
    - stable
    - xvfb
  variables:
    CARGO_MAKE_RUN_CODECOV: 'true'
    # TODO: Revert to stable when Rust 1.41 is released.
    # `InputReactions` was implemented relying on <https://github.com/rust-lang/rust/pull/65879>
    RUSTUP_TOOLCHAIN: nightly-x86_64-unknown-linux-gnu
    DISPLAY: ':0'
  before_script:
    - *print_tool_versions_linux
    - scripts/install_packages_linux.sh
    - scripts/install_cargo_update.sh
    - *install_update_cargo_subcommands
    - cargo install-update -i cargo-make hull

# Disabled until CI becomes stable, perhaps without using Vulkan.
.linux:debug:
  <<: *linux_job_common
  script:
    - time cargo test -j 4 --no-run
    - time cargo test -- --nocapture
  after_script:
    - 'export DISPLAY=:0'
    - scripts/workspace_coverage.sh
    - grep -F merged_files ./target/coverage/merged/index.js | grep -o '"covered":"[0-9]\+\.[0-9]\+"'
    - bash <(curl -s https://codecov.io/bash) -s ./target/coverage/merged
  coverage: '/"covered":"\d+\.\d+"/'

linux:release:
  <<: *linux_job_common
  script:
    - time cargo test -j 4 --no-run --release
    - time cargo test --release -- --nocapture
    - ./scripts/publish_prepare_app.sh
  artifacts:
    name: linux-x86_64
    when: on_success
    paths:
    - target/publish
    expire_in: 1 week

.windows_job_common: &windows_job_common
  stage: build_and_test
  tags:
    - windows
    - rust
    - stable
  variables:
    # TODO: Revert to stable when Rust 1.41 is released.
    # `InputReactions` was implemented relying on <https://github.com/rust-lang/rust/pull/65879>
    RUSTUP_TOOLCHAIN: nightly-x86_64-pc-windows-msvc
  before_script:
    - cargo --version -v
    - rustc --version -v
    - cargo install-update -i hull

.windows:debug:
  <<: *windows_job_common
  script:
    - cargo test --no-run
    - cargo test -- --nocapture

windows:release:
  <<: *windows_job_common
  script:
    - cargo test --no-run --release
    - cargo test --release -- --nocapture
    - .\scripts\publish_prepare_app.bat
  artifacts:
    name: windows-x86_64
    when: on_success
    paths:
    - target/publish
    expire_in: 1 week

linux:publish:
  stage: publish
  tags:
    - linux
    - rust
    - stable
  dependencies: ["linux:release"]
  variables:
    ITCH_IO_USER: azriel91
    CHANNEL: linux-x86_64
  script:
    # Publish `will`
    - app=will
    - metadata="$(cargo metadata --format-version 1 --no-deps --manifest-path app/${app}/Cargo.toml)"
    - version="$(echo "${metadata}" | jq -s ".[0].packages[] | select(.name == \"${app}\") | .version")"
    - >
      butler push \
        "target/publish/app/${app}" \
        "${ITCH_IO_USER}/${app}:${CHANNEL}" \
        --userversion "${version}" \
        --if-changed
  artifacts:
    name: linux-x86_64
    when: on_success
    paths:
    - target/publish
    expire_in: 1 week
  only:
    - tags

windows:publish:
  stage: publish
  tags:
    - windows
    - rust
    - stable
  dependencies: ["windows:release"]
  variables:
    ITCH_IO_USER: azriel91
    CHANNEL: windows-x86_64
  script:
    # Publish `will`
    - .\scripts\publish_butler_push.bat
  artifacts:
    name: windows-x86_64
    when: on_success
    paths:
    - target/publish
    expire_in: 1 week
  only:
    - tags
